{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL ? `${process.env.REACT_APP_API_URL}/api` : 'http://localhost:8000/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Authentication API calls\nexport const authAPI = {\n  login: credentials => api.post('/auth/login', credentials),\n  register: userData => api.post('/auth/register', userData),\n  getMe: () => api.get('/auth/me'),\n  updateProfile: data => api.put('/auth/profile', data)\n};\n\n// Booking API calls\nexport const bookingAPI = {\n  create: bookingData => api.post('/bookings', bookingData),\n  getMyBookings: params => api.get('/bookings/my', {\n    params\n  }),\n  getBooking: id => api.get(`/bookings/${id}`),\n  updateStatus: (id, data) => api.put(`/bookings/${id}/status`, data),\n  submitFeedback: (id, feedback) => api.put(`/bookings/${id}/feedback`, feedback),\n  getDashboardStats: () => api.get('/bookings/dashboard-stats')\n};\n\n// User API calls\nexport const userAPI = {\n  getPractitioners: params => api.get('/practitioners', {\n    params\n  }),\n  getPatients: params => api.get('/patients', {\n    params\n  })\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","response","error","_error$response","status","removeItem","window","location","href","Promise","reject","authAPI","login","credentials","post","register","userData","getMe","get","updateProfile","data","put","bookingAPI","bookingData","getMyBookings","params","getBooking","id","updateStatus","submitFeedback","feedback","getDashboardStats","userAPI","getPractitioners","getPatients"],"sources":["c:/Users/AMAN MAURYA/OneDrive/Desktop/now/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL ? `${process.env.REACT_APP_API_URL}/api` : 'http://localhost:8000/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Authentication API calls\nexport const authAPI = {\n  login: (credentials) => api.post('/auth/login', credentials),\n  register: (userData) => api.post('/auth/register', userData),\n  getMe: () => api.get('/auth/me'),\n  updateProfile: (data) => api.put('/auth/profile', data)\n};\n\n// Booking API calls\nexport const bookingAPI = {\n  create: (bookingData) => api.post('/bookings', bookingData),\n  getMyBookings: (params) => api.get('/bookings/my', { params }),\n  getBooking: (id) => api.get(`/bookings/${id}`),\n  updateStatus: (id, data) => api.put(`/bookings/${id}/status`, data),\n  submitFeedback: (id, feedback) => api.put(`/bookings/${id}/feedback`, feedback),\n  getDashboardStats: () => api.get('/bookings/dashboard-stats')\n};\n\n// User API calls\nexport const userAPI = {\n  getPractitioners: (params) => api.get('/practitioners', { params }),\n  getPatients: (params) => api.get('/patients', { params })\n};\n\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,GAAG,GAAGF,OAAO,CAACC,GAAG,CAACC,iBAAiB,MAAM,GAAG,2BAA2B;AAEzH,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;AAEFH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACvC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;AAEFP,GAAG,CAACI,YAAY,CAACQ,QAAQ,CAACN,GAAG,CAC1BM,QAAQ,IAAKA,QAAQ,EACrBC,KAAK,IAAK;EAAA,IAAAC,eAAA;EACT,IAAI,EAAAA,eAAA,GAAAD,KAAK,CAACD,QAAQ,cAAAE,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IAClCN,YAAY,CAACO,UAAU,CAAC,OAAO,CAAC;IAChCP,YAAY,CAACO,UAAU,CAAC,MAAM,CAAC;IAC/BC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;EACA,OAAOC,OAAO,CAACC,MAAM,CAACR,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMS,OAAO,GAAG;EACrBC,KAAK,EAAGC,WAAW,IAAKxB,GAAG,CAACyB,IAAI,CAAC,aAAa,EAAED,WAAW,CAAC;EAC5DE,QAAQ,EAAGC,QAAQ,IAAK3B,GAAG,CAACyB,IAAI,CAAC,gBAAgB,EAAEE,QAAQ,CAAC;EAC5DC,KAAK,EAAEA,CAAA,KAAM5B,GAAG,CAAC6B,GAAG,CAAC,UAAU,CAAC;EAChCC,aAAa,EAAGC,IAAI,IAAK/B,GAAG,CAACgC,GAAG,CAAC,eAAe,EAAED,IAAI;AACxD,CAAC;;AAED;AACA,OAAO,MAAME,UAAU,GAAG;EACxBhC,MAAM,EAAGiC,WAAW,IAAKlC,GAAG,CAACyB,IAAI,CAAC,WAAW,EAAES,WAAW,CAAC;EAC3DC,aAAa,EAAGC,MAAM,IAAKpC,GAAG,CAAC6B,GAAG,CAAC,cAAc,EAAE;IAAEO;EAAO,CAAC,CAAC;EAC9DC,UAAU,EAAGC,EAAE,IAAKtC,GAAG,CAAC6B,GAAG,CAAC,aAAaS,EAAE,EAAE,CAAC;EAC9CC,YAAY,EAAEA,CAACD,EAAE,EAAEP,IAAI,KAAK/B,GAAG,CAACgC,GAAG,CAAC,aAAaM,EAAE,SAAS,EAAEP,IAAI,CAAC;EACnES,cAAc,EAAEA,CAACF,EAAE,EAAEG,QAAQ,KAAKzC,GAAG,CAACgC,GAAG,CAAC,aAAaM,EAAE,WAAW,EAAEG,QAAQ,CAAC;EAC/EC,iBAAiB,EAAEA,CAAA,KAAM1C,GAAG,CAAC6B,GAAG,CAAC,2BAA2B;AAC9D,CAAC;;AAED;AACA,OAAO,MAAMc,OAAO,GAAG;EACrBC,gBAAgB,EAAGR,MAAM,IAAKpC,GAAG,CAAC6B,GAAG,CAAC,gBAAgB,EAAE;IAAEO;EAAO,CAAC,CAAC;EACnES,WAAW,EAAGT,MAAM,IAAKpC,GAAG,CAAC6B,GAAG,CAAC,WAAW,EAAE;IAAEO;EAAO,CAAC;AAC1D,CAAC;AAED,eAAepC,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}