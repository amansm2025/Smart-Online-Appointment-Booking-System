{"ast":null,"code":"// Mock authentication service with real user data\nconst MOCK_USERS = [\n// Patients\n{\n  id: 1,\n  email: 'john.doe@email.com',\n  password: 'patient123',\n  role: 'patient',\n  name: 'John Doe',\n  phone: '+91 98765 43210',\n  age: 35,\n  gender: 'Male'\n}, {\n  id: 2,\n  email: 'jane.smith@email.com',\n  password: 'patient123',\n  role: 'patient',\n  name: 'Jane Smith',\n  phone: '+91 98765 43211',\n  age: 28,\n  gender: 'Female'\n}, {\n  id: 3,\n  email: 'patient@ayursutra.com',\n  password: 'demo123',\n  role: 'patient',\n  name: 'Demo Patient',\n  phone: '+91 98765 43212',\n  age: 30,\n  gender: 'Male'\n},\n// Practitioners\n{\n  id: 4,\n  email: 'priya.sharma@ayursutra.com',\n  password: 'practitioner123',\n  role: 'practitioner',\n  name: 'Dr. Priya Sharma',\n  phone: '+91 98765 43213',\n  experience: '15 years',\n  specialization: 'Panchakarma & Abhyanga',\n  rating: 4.9\n}, {\n  id: 5,\n  email: 'rajesh.patel@ayursutra.com',\n  password: 'practitioner123',\n  role: 'practitioner',\n  name: 'Dr. Rajesh Patel',\n  phone: '+91 98765 43214',\n  experience: '12 years',\n  specialization: 'Shirodhara & Nasya',\n  rating: 4.8\n}, {\n  id: 6,\n  email: 'practitioner@ayursutra.com',\n  password: 'demo123',\n  role: 'practitioner',\n  name: 'Dr. Demo Practitioner',\n  phone: '+91 98765 43215',\n  experience: '10 years',\n  specialization: 'General Ayurveda',\n  rating: 4.7\n},\n// Admin\n{\n  id: 7,\n  email: 'admin@ayursutra.com',\n  password: 'admin123',\n  role: 'admin',\n  name: 'Admin User',\n  phone: '+91 98765 43216'\n}, {\n  id: 8,\n  email: 'demo@ayursutra.com',\n  password: 'demo123',\n  role: 'admin',\n  name: 'Demo Admin',\n  phone: '+91 98765 43217'\n}];\n\n// Mock authentication functions\nexport const mockLogin = async (email, password) => {\n  // Simulate API delay\n  await new Promise(resolve => setTimeout(resolve, 1000));\n  const user = MOCK_USERS.find(u => u.email === email && u.password === password);\n  if (!user) {\n    throw new Error('Invalid email or password');\n  }\n\n  // Generate mock token\n  const token = `mock_token_${user.id}_${Date.now()}`;\n  return {\n    token,\n    user: {\n      id: user.id,\n      email: user.email,\n      role: user.role,\n      name: user.name,\n      phone: user.phone,\n      ...(user.role === 'patient' && {\n        age: user.age,\n        gender: user.gender\n      }),\n      ...(user.role === 'practitioner' && {\n        experience: user.experience,\n        specialization: user.specialization,\n        rating: user.rating\n      })\n    }\n  };\n};\nexport const mockRegister = async userData => {\n  // Simulate API delay\n  await new Promise(resolve => setTimeout(resolve, 1000));\n\n  // Check if user already exists\n  const existingUser = MOCK_USERS.find(u => u.email === userData.email);\n  if (existingUser) {\n    throw new Error('User already exists with this email');\n  }\n\n  // Create new user\n  const newUser = {\n    id: MOCK_USERS.length + 1,\n    ...userData,\n    password: userData.password\n  };\n  MOCK_USERS.push(newUser);\n\n  // Generate mock token\n  const token = `mock_token_${newUser.id}_${Date.now()}`;\n  return {\n    token,\n    user: {\n      id: newUser.id,\n      email: newUser.email,\n      role: newUser.role,\n      name: newUser.name,\n      phone: newUser.phone,\n      ...(newUser.role === 'patient' && {\n        age: newUser.age,\n        gender: newUser.gender\n      }),\n      ...(newUser.role === 'practitioner' && {\n        experience: newUser.experience,\n        specialization: newUser.specialization,\n        rating: newUser.rating || 4.5\n      })\n    }\n  };\n};\nexport const validateToken = token => {\n  return token && token.startsWith('mock_token_');\n};\nexport const getUserFromToken = token => {\n  if (!validateToken(token)) return null;\n  const userId = parseInt(token.split('_')[2]);\n  const user = MOCK_USERS.find(u => u.id === userId);\n  if (!user) return null;\n  return {\n    id: user.id,\n    email: user.email,\n    role: user.role,\n    name: user.name,\n    phone: user.phone,\n    ...(user.role === 'patient' && {\n      age: user.age,\n      gender: user.gender\n    }),\n    ...(user.role === 'practitioner' && {\n      experience: user.experience,\n      specialization: user.specialization,\n      rating: user.rating\n    })\n  };\n};\n\n// Export mock users for reference\nexport const getMockUsers = () => MOCK_USERS;","map":{"version":3,"names":["MOCK_USERS","id","email","password","role","name","phone","age","gender","experience","specialization","rating","mockLogin","Promise","resolve","setTimeout","user","find","u","Error","token","Date","now","mockRegister","userData","existingUser","newUser","length","push","validateToken","startsWith","getUserFromToken","userId","parseInt","split","getMockUsers"],"sources":["c:/Users/AMAN MAURYA/OneDrive/Desktop/now/src/services/mockAuth.js"],"sourcesContent":["// Mock authentication service with real user data\nconst MOCK_USERS = [\n  // Patients\n  {\n    id: 1,\n    email: 'john.doe@email.com',\n    password: 'patient123',\n    role: 'patient',\n    name: 'John Doe',\n    phone: '+91 98765 43210',\n    age: 35,\n    gender: 'Male'\n  },\n  {\n    id: 2,\n    email: 'jane.smith@email.com',\n    password: 'patient123',\n    role: 'patient',\n    name: 'Jane Smith',\n    phone: '+91 98765 43211',\n    age: 28,\n    gender: 'Female'\n  },\n  {\n    id: 3,\n    email: 'patient@ayursutra.com',\n    password: 'demo123',\n    role: 'patient',\n    name: 'Demo Patient',\n    phone: '+91 98765 43212',\n    age: 30,\n    gender: 'Male'\n  },\n  \n  // Practitioners\n  {\n    id: 4,\n    email: 'priya.sharma@ayursutra.com',\n    password: 'practitioner123',\n    role: 'practitioner',\n    name: 'Dr. Priya Sharma',\n    phone: '+91 98765 43213',\n    experience: '15 years',\n    specialization: 'Panchakarma & Abhyanga',\n    rating: 4.9\n  },\n  {\n    id: 5,\n    email: 'rajesh.patel@ayursutra.com',\n    password: 'practitioner123',\n    role: 'practitioner',\n    name: 'Dr. Rajesh Patel',\n    phone: '+91 98765 43214',\n    experience: '12 years',\n    specialization: 'Shirodhara & Nasya',\n    rating: 4.8\n  },\n  {\n    id: 6,\n    email: 'practitioner@ayursutra.com',\n    password: 'demo123',\n    role: 'practitioner',\n    name: 'Dr. Demo Practitioner',\n    phone: '+91 98765 43215',\n    experience: '10 years',\n    specialization: 'General Ayurveda',\n    rating: 4.7\n  },\n  \n  // Admin\n  {\n    id: 7,\n    email: 'admin@ayursutra.com',\n    password: 'admin123',\n    role: 'admin',\n    name: 'Admin User',\n    phone: '+91 98765 43216'\n  },\n  {\n    id: 8,\n    email: 'demo@ayursutra.com',\n    password: 'demo123',\n    role: 'admin',\n    name: 'Demo Admin',\n    phone: '+91 98765 43217'\n  }\n];\n\n// Mock authentication functions\nexport const mockLogin = async (email, password) => {\n  // Simulate API delay\n  await new Promise(resolve => setTimeout(resolve, 1000));\n  \n  const user = MOCK_USERS.find(u => u.email === email && u.password === password);\n  \n  if (!user) {\n    throw new Error('Invalid email or password');\n  }\n  \n  // Generate mock token\n  const token = `mock_token_${user.id}_${Date.now()}`;\n  \n  return {\n    token,\n    user: {\n      id: user.id,\n      email: user.email,\n      role: user.role,\n      name: user.name,\n      phone: user.phone,\n      ...(user.role === 'patient' && { age: user.age, gender: user.gender }),\n      ...(user.role === 'practitioner' && { \n        experience: user.experience, \n        specialization: user.specialization, \n        rating: user.rating \n      })\n    }\n  };\n};\n\nexport const mockRegister = async (userData) => {\n  // Simulate API delay\n  await new Promise(resolve => setTimeout(resolve, 1000));\n  \n  // Check if user already exists\n  const existingUser = MOCK_USERS.find(u => u.email === userData.email);\n  if (existingUser) {\n    throw new Error('User already exists with this email');\n  }\n  \n  // Create new user\n  const newUser = {\n    id: MOCK_USERS.length + 1,\n    ...userData,\n    password: userData.password\n  };\n  \n  MOCK_USERS.push(newUser);\n  \n  // Generate mock token\n  const token = `mock_token_${newUser.id}_${Date.now()}`;\n  \n  return {\n    token,\n    user: {\n      id: newUser.id,\n      email: newUser.email,\n      role: newUser.role,\n      name: newUser.name,\n      phone: newUser.phone,\n      ...(newUser.role === 'patient' && { age: newUser.age, gender: newUser.gender }),\n      ...(newUser.role === 'practitioner' && { \n        experience: newUser.experience, \n        specialization: newUser.specialization, \n        rating: newUser.rating || 4.5\n      })\n    }\n  };\n};\n\nexport const validateToken = (token) => {\n  return token && token.startsWith('mock_token_');\n};\n\nexport const getUserFromToken = (token) => {\n  if (!validateToken(token)) return null;\n  \n  const userId = parseInt(token.split('_')[2]);\n  const user = MOCK_USERS.find(u => u.id === userId);\n  \n  if (!user) return null;\n  \n  return {\n    id: user.id,\n    email: user.email,\n    role: user.role,\n    name: user.name,\n    phone: user.phone,\n    ...(user.role === 'patient' && { age: user.age, gender: user.gender }),\n    ...(user.role === 'practitioner' && { \n      experience: user.experience, \n      specialization: user.specialization, \n      rating: user.rating \n    })\n  };\n};\n\n// Export mock users for reference\nexport const getMockUsers = () => MOCK_USERS;"],"mappings":"AAAA;AACA,MAAMA,UAAU,GAAG;AACjB;AACA;EACEC,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,oBAAoB;EAC3BC,QAAQ,EAAE,YAAY;EACtBC,IAAI,EAAE,SAAS;EACfC,IAAI,EAAE,UAAU;EAChBC,KAAK,EAAE,iBAAiB;EACxBC,GAAG,EAAE,EAAE;EACPC,MAAM,EAAE;AACV,CAAC,EACD;EACEP,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,sBAAsB;EAC7BC,QAAQ,EAAE,YAAY;EACtBC,IAAI,EAAE,SAAS;EACfC,IAAI,EAAE,YAAY;EAClBC,KAAK,EAAE,iBAAiB;EACxBC,GAAG,EAAE,EAAE;EACPC,MAAM,EAAE;AACV,CAAC,EACD;EACEP,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,uBAAuB;EAC9BC,QAAQ,EAAE,SAAS;EACnBC,IAAI,EAAE,SAAS;EACfC,IAAI,EAAE,cAAc;EACpBC,KAAK,EAAE,iBAAiB;EACxBC,GAAG,EAAE,EAAE;EACPC,MAAM,EAAE;AACV,CAAC;AAED;AACA;EACEP,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,4BAA4B;EACnCC,QAAQ,EAAE,iBAAiB;EAC3BC,IAAI,EAAE,cAAc;EACpBC,IAAI,EAAE,kBAAkB;EACxBC,KAAK,EAAE,iBAAiB;EACxBG,UAAU,EAAE,UAAU;EACtBC,cAAc,EAAE,wBAAwB;EACxCC,MAAM,EAAE;AACV,CAAC,EACD;EACEV,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,4BAA4B;EACnCC,QAAQ,EAAE,iBAAiB;EAC3BC,IAAI,EAAE,cAAc;EACpBC,IAAI,EAAE,kBAAkB;EACxBC,KAAK,EAAE,iBAAiB;EACxBG,UAAU,EAAE,UAAU;EACtBC,cAAc,EAAE,oBAAoB;EACpCC,MAAM,EAAE;AACV,CAAC,EACD;EACEV,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,4BAA4B;EACnCC,QAAQ,EAAE,SAAS;EACnBC,IAAI,EAAE,cAAc;EACpBC,IAAI,EAAE,uBAAuB;EAC7BC,KAAK,EAAE,iBAAiB;EACxBG,UAAU,EAAE,UAAU;EACtBC,cAAc,EAAE,kBAAkB;EAClCC,MAAM,EAAE;AACV,CAAC;AAED;AACA;EACEV,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,qBAAqB;EAC5BC,QAAQ,EAAE,UAAU;EACpBC,IAAI,EAAE,OAAO;EACbC,IAAI,EAAE,YAAY;EAClBC,KAAK,EAAE;AACT,CAAC,EACD;EACEL,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,oBAAoB;EAC3BC,QAAQ,EAAE,SAAS;EACnBC,IAAI,EAAE,OAAO;EACbC,IAAI,EAAE,YAAY;EAClBC,KAAK,EAAE;AACT,CAAC,CACF;;AAED;AACA,OAAO,MAAMM,SAAS,GAAG,MAAAA,CAAOV,KAAK,EAAEC,QAAQ,KAAK;EAClD;EACA,MAAM,IAAIU,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;EAEvD,MAAME,IAAI,GAAGhB,UAAU,CAACiB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAAChB,KAAK,KAAKA,KAAK,IAAIgB,CAAC,CAACf,QAAQ,KAAKA,QAAQ,CAAC;EAE/E,IAAI,CAACa,IAAI,EAAE;IACT,MAAM,IAAIG,KAAK,CAAC,2BAA2B,CAAC;EAC9C;;EAEA;EACA,MAAMC,KAAK,GAAG,cAAcJ,IAAI,CAACf,EAAE,IAAIoB,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;EAEnD,OAAO;IACLF,KAAK;IACLJ,IAAI,EAAE;MACJf,EAAE,EAAEe,IAAI,CAACf,EAAE;MACXC,KAAK,EAAEc,IAAI,CAACd,KAAK;MACjBE,IAAI,EAAEY,IAAI,CAACZ,IAAI;MACfC,IAAI,EAAEW,IAAI,CAACX,IAAI;MACfC,KAAK,EAAEU,IAAI,CAACV,KAAK;MACjB,IAAIU,IAAI,CAACZ,IAAI,KAAK,SAAS,IAAI;QAAEG,GAAG,EAAES,IAAI,CAACT,GAAG;QAAEC,MAAM,EAAEQ,IAAI,CAACR;MAAO,CAAC,CAAC;MACtE,IAAIQ,IAAI,CAACZ,IAAI,KAAK,cAAc,IAAI;QAClCK,UAAU,EAAEO,IAAI,CAACP,UAAU;QAC3BC,cAAc,EAAEM,IAAI,CAACN,cAAc;QACnCC,MAAM,EAAEK,IAAI,CAACL;MACf,CAAC;IACH;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMY,YAAY,GAAG,MAAOC,QAAQ,IAAK;EAC9C;EACA,MAAM,IAAIX,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;;EAEvD;EACA,MAAMW,YAAY,GAAGzB,UAAU,CAACiB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAAChB,KAAK,KAAKsB,QAAQ,CAACtB,KAAK,CAAC;EACrE,IAAIuB,YAAY,EAAE;IAChB,MAAM,IAAIN,KAAK,CAAC,qCAAqC,CAAC;EACxD;;EAEA;EACA,MAAMO,OAAO,GAAG;IACdzB,EAAE,EAAED,UAAU,CAAC2B,MAAM,GAAG,CAAC;IACzB,GAAGH,QAAQ;IACXrB,QAAQ,EAAEqB,QAAQ,CAACrB;EACrB,CAAC;EAEDH,UAAU,CAAC4B,IAAI,CAACF,OAAO,CAAC;;EAExB;EACA,MAAMN,KAAK,GAAG,cAAcM,OAAO,CAACzB,EAAE,IAAIoB,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;EAEtD,OAAO;IACLF,KAAK;IACLJ,IAAI,EAAE;MACJf,EAAE,EAAEyB,OAAO,CAACzB,EAAE;MACdC,KAAK,EAAEwB,OAAO,CAACxB,KAAK;MACpBE,IAAI,EAAEsB,OAAO,CAACtB,IAAI;MAClBC,IAAI,EAAEqB,OAAO,CAACrB,IAAI;MAClBC,KAAK,EAAEoB,OAAO,CAACpB,KAAK;MACpB,IAAIoB,OAAO,CAACtB,IAAI,KAAK,SAAS,IAAI;QAAEG,GAAG,EAAEmB,OAAO,CAACnB,GAAG;QAAEC,MAAM,EAAEkB,OAAO,CAAClB;MAAO,CAAC,CAAC;MAC/E,IAAIkB,OAAO,CAACtB,IAAI,KAAK,cAAc,IAAI;QACrCK,UAAU,EAAEiB,OAAO,CAACjB,UAAU;QAC9BC,cAAc,EAAEgB,OAAO,CAAChB,cAAc;QACtCC,MAAM,EAAEe,OAAO,CAACf,MAAM,IAAI;MAC5B,CAAC;IACH;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMkB,aAAa,GAAIT,KAAK,IAAK;EACtC,OAAOA,KAAK,IAAIA,KAAK,CAACU,UAAU,CAAC,aAAa,CAAC;AACjD,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAIX,KAAK,IAAK;EACzC,IAAI,CAACS,aAAa,CAACT,KAAK,CAAC,EAAE,OAAO,IAAI;EAEtC,MAAMY,MAAM,GAAGC,QAAQ,CAACb,KAAK,CAACc,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EAC5C,MAAMlB,IAAI,GAAGhB,UAAU,CAACiB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACjB,EAAE,KAAK+B,MAAM,CAAC;EAElD,IAAI,CAAChB,IAAI,EAAE,OAAO,IAAI;EAEtB,OAAO;IACLf,EAAE,EAAEe,IAAI,CAACf,EAAE;IACXC,KAAK,EAAEc,IAAI,CAACd,KAAK;IACjBE,IAAI,EAAEY,IAAI,CAACZ,IAAI;IACfC,IAAI,EAAEW,IAAI,CAACX,IAAI;IACfC,KAAK,EAAEU,IAAI,CAACV,KAAK;IACjB,IAAIU,IAAI,CAACZ,IAAI,KAAK,SAAS,IAAI;MAAEG,GAAG,EAAES,IAAI,CAACT,GAAG;MAAEC,MAAM,EAAEQ,IAAI,CAACR;IAAO,CAAC,CAAC;IACtE,IAAIQ,IAAI,CAACZ,IAAI,KAAK,cAAc,IAAI;MAClCK,UAAU,EAAEO,IAAI,CAACP,UAAU;MAC3BC,cAAc,EAAEM,IAAI,CAACN,cAAc;MACnCC,MAAM,EAAEK,IAAI,CAACL;IACf,CAAC;EACH,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAMwB,YAAY,GAAGA,CAAA,KAAMnC,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}